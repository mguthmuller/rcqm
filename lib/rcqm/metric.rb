module Rcqm

  class Metric

    def initialize(options)
      @options = options      
      check_options_values
    end

    def check_options_values
      # Check if files specified with -f option exist
      unless @options[:files].nil?
        @files = @options[:files].split(',')
        @files.delete_if do |filename|
          unless File.exist?(filename)
            puts "#{filename} does not exist. Ignore it."
            true
          end
        end
        if @files.empty?
          puts 'No file to analyze. Aborted!'
          exit
        end
      end
      # Check if files specified with -e option exist
      unless @options[:exclude].nil?
        @excluded_files = @options[:exclude].split(',')
        @excluded_files.delete_if do |filename|
          unless File.exist?(filename)
            puts "#{filename} does not exist. Ignore it."
            true
          end
        end
      end
    end

    def check_dir(dirname)
      puts "==== Analyze directory #{dirname} ===="
      Dir.open(dirname).each do |subfile|
        # Exclude '.' and '..' directories 
        next if (subfile.eql? '..') || (subfile.eql? '.')
        if File.file?("#{dirname}/#{subfile}")
          # Backup files (generated by emacs for example) are not analyzed
          next if (subfile =~ /^\#/) || (subfile =~ /.*\~/)
          check_file("#{dirname}/#{subfile}")
        elsif File.directory?("#{dirname}/#{subfile}")
          check_dir("#{dirname}/#{subfile}")
        else
          STDERR.puts "#{subfile}: Unknown type of file "\
                      "#{File.ftype(dirname/subfile)}. Aborted!"
          exit
        end
      end
    end
    
    def check
      @files.each do |filename|
        next if (filename.eql? '..') || (filename.eql? '.')
        if File.file?(filename)
          check_file(filename)
        elsif File.directory?(filename)
          check_dir(filename)
        else
          STDERR.puts "#{filename}: Unknown type of file "\
                      "#{File.ftype(filename)} . Aborted!"
          exit
        end
      end
    end

    def uncolorize(string)
      string.gsub(/\e\[(\d+)(;(\d+))*m/, '') 
    end

    
  end

end
